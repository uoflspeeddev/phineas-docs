#!/bin/bash
#SBATCH --job-name=ansys_mech_test
#SBATCH --error=/home/user/ansys_mech_test.err.%j
#SBATCH --output=/home/user/ansys_mech_test.out.%j
#SBATCH --time=05:30:00
#SBATCH --mem=120G
#SBATCH --ntasks-per-node=20
#SBATCH --nodes=3
#SBATCH --partition=longjobs

##############################################################
# .---------------------------------------.
# | MODIFY THESE VARIABLES AS YOU SEE FIT |
# '---------------------------------------'
# Contains all source files required for a MAPDL simulation
SOURCE_DIR="/home/username/simulation_1"
# Results are saved to this folder
RESULT_DIR="/home/username/simulation_1_result"
# Name of input file within SOURCE_DIR to be passed
# directly to MAPDL
MAPDL_INPUT_FILE_NAME="remote.dat"
# Any output generated by MAPDL during the simulation will
# be written to this file
MAPDL_OUTPUT_FILE_NAME="mapdl_output.out"
#############################################################

WORK_DIR="/tmp/$SLURM_JOB_ID"
INPUT_FILE="$WORK_DIR/$MAPDL_INPUT_FILE_NAME"
OUTPUT_FILE="$WORK_DIR/$MAPDL_OUTPUT_FILE_NAME"
TRIES=2

# Get hostnames of allocated nodes for the job
declare -a NODES
mapfile -t NODES < <(srun hostname | uniq)

# Helper function to execute a command on all
# compute nodes allocated for the job
function computes_run {
    cmd="$@"
    pdsh -w `echo "${NODES[*]}" | sed 's/ /,/g'` -R ssh "$cmd"
}

# Delete everything from scratch space after
# the simulation is done
function cleanup {
    computes_run "test -d $WORK_DIR && rm -rf $WORK_DIR"
}
trap cleanup EXIT

# Copy source files from shared space to
# scratch space of each allocated node
computes_run "cp -r $SOURCE_DIR $WORK_DIR"

# Get list of nodes to use for the computation
# in the format:
# <node_1>:<cores>:<node_2>:<cores>:...:<node_n>:<cores>
MACHINES=$(srun hostname | sort | uniq -c | \
            awk '{print $2 ":" $1}' | \
            paste -s -d ":" -)

module load infiniband ansys/2023r1

cd $WORK_DIR

for ((i = 0; i < $TRIES; i++)); do
    mapdl -dis -usessh -b -s noread \
        -p ansys \
        -j 'file' \
        -machines "$MACHINES" \
        -dir "$WORK_DIR" \
        -i "$INPUT_FILE" \
        -o "$OUTPUT_FILE"
    if [ $? == 0 ]; then break; fi
done

cp -r $WORK_DIR $RESULT_DIR